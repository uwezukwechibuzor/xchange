// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xchange/isomessages/securities_trade_confirmation.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecuritiesTradeConfirmation struct {
	Id             uint64                                   `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	TradConfId     string                                   `protobuf:"bytes,1,opt,name=trad_conf_id,json=tradConfId,proto3" json:"trad_conf_id,omitempty"`
	TradConfDtTm   string                                   `protobuf:"bytes,2,opt,name=trad_conf_dt_tm,json=tradConfDtTm,proto3" json:"trad_conf_dt_tm,omitempty"`
	RltdOrdrId     string                                   `protobuf:"bytes,3,opt,name=rltd_ordr_id,json=rltdOrdrId,proto3" json:"rltd_ordr_id,omitempty"`
	RltdCshMvmntId string                                   `protobuf:"bytes,4,opt,name=rltd_csh_mvmnt_id,json=rltdCshMvmntId,proto3" json:"rltd_csh_mvmnt_id,omitempty"`
	Side           string                                   `protobuf:"bytes,5,opt,name=side,proto3" json:"side,omitempty"`
	Qty            *SecuritiesTradeConfirmation_Qty         `protobuf:"bytes,6,opt,name=qty,proto3" json:"qty,omitempty"`
	FinInstrmId    *SecuritiesTradeConfirmation_FinInstrmId `protobuf:"bytes,7,opt,name=fin_instrm_id,json=finInstrmId,proto3" json:"fin_instrm_id,omitempty"`
	Pric           *SecuritiesTradeConfirmation_Pric        `protobuf:"bytes,8,opt,name=pric,proto3" json:"pric,omitempty"`
	TradDt         string                                   `protobuf:"bytes,9,opt,name=trad_dt,json=tradDt,proto3" json:"trad_dt,omitempty"`
	SttlmDt        string                                   `protobuf:"bytes,10,opt,name=sttlm_dt,json=sttlmDt,proto3" json:"sttlm_dt,omitempty"`
	TradVenue      *SecuritiesTradeConfirmation_TradVenue   `protobuf:"bytes,11,opt,name=trad_venue,json=tradVenue,proto3" json:"trad_venue,omitempty"`
	TradgPty       *SecuritiesTradeConfirmation_TradgPty    `protobuf:"bytes,12,opt,name=tradg_pty,json=tradgPty,proto3" json:"tradg_pty,omitempty"`
}

func (m *SecuritiesTradeConfirmation) Reset()         { *m = SecuritiesTradeConfirmation{} }
func (m *SecuritiesTradeConfirmation) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0}
}
func (m *SecuritiesTradeConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SecuritiesTradeConfirmation) GetTradConfId() string {
	if m != nil {
		return m.TradConfId
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetTradConfDtTm() string {
	if m != nil {
		return m.TradConfDtTm
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetRltdOrdrId() string {
	if m != nil {
		return m.RltdOrdrId
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetRltdCshMvmntId() string {
	if m != nil {
		return m.RltdCshMvmntId
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetQty() *SecuritiesTradeConfirmation_Qty {
	if m != nil {
		return m.Qty
	}
	return nil
}

func (m *SecuritiesTradeConfirmation) GetFinInstrmId() *SecuritiesTradeConfirmation_FinInstrmId {
	if m != nil {
		return m.FinInstrmId
	}
	return nil
}

func (m *SecuritiesTradeConfirmation) GetPric() *SecuritiesTradeConfirmation_Pric {
	if m != nil {
		return m.Pric
	}
	return nil
}

func (m *SecuritiesTradeConfirmation) GetTradDt() string {
	if m != nil {
		return m.TradDt
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetSttlmDt() string {
	if m != nil {
		return m.SttlmDt
	}
	return ""
}

func (m *SecuritiesTradeConfirmation) GetTradVenue() *SecuritiesTradeConfirmation_TradVenue {
	if m != nil {
		return m.TradVenue
	}
	return nil
}

func (m *SecuritiesTradeConfirmation) GetTradgPty() *SecuritiesTradeConfirmation_TradgPty {
	if m != nil {
		return m.TradgPty
	}
	return nil
}

type SecuritiesTradeConfirmation_Qty struct {
	Units int32 `protobuf:"varint,1,opt,name=units,proto3" json:"units,omitempty"`
}

func (m *SecuritiesTradeConfirmation_Qty) Reset()         { *m = SecuritiesTradeConfirmation_Qty{} }
func (m *SecuritiesTradeConfirmation_Qty) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation_Qty) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation_Qty) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 0}
}
func (m *SecuritiesTradeConfirmation_Qty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_Qty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_Qty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_Qty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_Qty.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_Qty) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_Qty) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_Qty.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_Qty proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_Qty) GetUnits() int32 {
	if m != nil {
		return m.Units
	}
	return 0
}

type SecuritiesTradeConfirmation_FinInstrmId struct {
	Isin string `protobuf:"bytes,1,opt,name=isin,proto3" json:"isin,omitempty"`
}

func (m *SecuritiesTradeConfirmation_FinInstrmId) Reset() {
	*m = SecuritiesTradeConfirmation_FinInstrmId{}
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation_FinInstrmId) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation_FinInstrmId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 1}
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_FinInstrmId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_FinInstrmId.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_FinInstrmId.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_FinInstrmId proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_FinInstrmId) GetIsin() string {
	if m != nil {
		return m.Isin
	}
	return ""
}

type SecuritiesTradeConfirmation_Pric struct {
	Amt *SecuritiesTradeConfirmation_Pric_Amt `protobuf:"bytes,1,opt,name=amt,proto3" json:"amt,omitempty"`
}

func (m *SecuritiesTradeConfirmation_Pric) Reset()         { *m = SecuritiesTradeConfirmation_Pric{} }
func (m *SecuritiesTradeConfirmation_Pric) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation_Pric) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation_Pric) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 2}
}
func (m *SecuritiesTradeConfirmation_Pric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_Pric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_Pric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_Pric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_Pric.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_Pric) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_Pric) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_Pric.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_Pric proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_Pric) GetAmt() *SecuritiesTradeConfirmation_Pric_Amt {
	if m != nil {
		return m.Amt
	}
	return nil
}

type SecuritiesTradeConfirmation_Pric_Amt struct {
	Ccy      string `protobuf:"bytes,1,opt,name=ccy,proto3" json:"ccy,omitempty"`
	InstdAmt string `protobuf:"bytes,2,opt,name=instd_amt,json=instdAmt,proto3" json:"instd_amt,omitempty"`
}

func (m *SecuritiesTradeConfirmation_Pric_Amt) Reset()         { *m = SecuritiesTradeConfirmation_Pric_Amt{} }
func (m *SecuritiesTradeConfirmation_Pric_Amt) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation_Pric_Amt) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation_Pric_Amt) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 2, 0}
}
func (m *SecuritiesTradeConfirmation_Pric_Amt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_Pric_Amt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_Pric_Amt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_Pric_Amt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_Pric_Amt.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_Pric_Amt) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_Pric_Amt) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_Pric_Amt.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_Pric_Amt proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_Pric_Amt) GetCcy() string {
	if m != nil {
		return m.Ccy
	}
	return ""
}

func (m *SecuritiesTradeConfirmation_Pric_Amt) GetInstdAmt() string {
	if m != nil {
		return m.InstdAmt
	}
	return ""
}

type SecuritiesTradeConfirmation_TradVenue struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradVenue) Reset()         { *m = SecuritiesTradeConfirmation_TradVenue{} }
func (m *SecuritiesTradeConfirmation_TradVenue) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation_TradVenue) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation_TradVenue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 3}
}
func (m *SecuritiesTradeConfirmation_TradVenue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradVenue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradVenue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradVenue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradVenue.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradVenue) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradVenue) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradVenue.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradVenue proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradVenue) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SecuritiesTradeConfirmation_TradgPty struct {
	PtyId   *SecuritiesTradeConfirmation_TradgPty_PtyId   `protobuf:"bytes,1,opt,name=pty_id,json=ptyId,proto3" json:"pty_id,omitempty"`
	RltdPty *SecuritiesTradeConfirmation_TradgPty_RltdPty `protobuf:"bytes,2,opt,name=rltd_pty,json=rltdPty,proto3" json:"rltd_pty,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradgPty) Reset()         { *m = SecuritiesTradeConfirmation_TradgPty{} }
func (m *SecuritiesTradeConfirmation_TradgPty) String() string { return proto.CompactTextString(m) }
func (*SecuritiesTradeConfirmation_TradgPty) ProtoMessage()    {}
func (*SecuritiesTradeConfirmation_TradgPty) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 4}
}
func (m *SecuritiesTradeConfirmation_TradgPty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradgPty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradgPty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradgPty) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradgPty) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradgPty) GetPtyId() *SecuritiesTradeConfirmation_TradgPty_PtyId {
	if m != nil {
		return m.PtyId
	}
	return nil
}

func (m *SecuritiesTradeConfirmation_TradgPty) GetRltdPty() *SecuritiesTradeConfirmation_TradgPty_RltdPty {
	if m != nil {
		return m.RltdPty
	}
	return nil
}

type SecuritiesTradeConfirmation_TradgPty_PtyId struct {
	OrgId *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) Reset() {
	*m = SecuritiesTradeConfirmation_TradgPty_PtyId{}
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) String() string {
	return proto.CompactTextString(m)
}
func (*SecuritiesTradeConfirmation_TradgPty_PtyId) ProtoMessage() {}
func (*SecuritiesTradeConfirmation_TradgPty_PtyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 4, 0}
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) GetOrgId() *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId {
	if m != nil {
		return m.OrgId
	}
	return nil
}

type SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId struct {
	Bic string `protobuf:"bytes,1,opt,name=bic,proto3" json:"bic,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) Reset() {
	*m = SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId{}
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) String() string {
	return proto.CompactTextString(m)
}
func (*SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) ProtoMessage() {}
func (*SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 4, 0, 0}
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) GetBic() string {
	if m != nil {
		return m.Bic
	}
	return ""
}

type SecuritiesTradeConfirmation_TradgPty_RltdPty struct {
	PtyId *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId `protobuf:"bytes,1,opt,name=pty_id,json=ptyId,proto3" json:"pty_id,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) Reset() {
	*m = SecuritiesTradeConfirmation_TradgPty_RltdPty{}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) String() string {
	return proto.CompactTextString(m)
}
func (*SecuritiesTradeConfirmation_TradgPty_RltdPty) ProtoMessage() {}
func (*SecuritiesTradeConfirmation_TradgPty_RltdPty) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 4, 1}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) GetPtyId() *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId {
	if m != nil {
		return m.PtyId
	}
	return nil
}

type SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId struct {
	OrgId *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) Reset() {
	*m = SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId{}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) String() string {
	return proto.CompactTextString(m)
}
func (*SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) ProtoMessage() {}
func (*SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 4, 1, 0}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) GetOrgId() *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId {
	if m != nil {
		return m.OrgId
	}
	return nil
}

type SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId struct {
	Bic string `protobuf:"bytes,1,opt,name=bic,proto3" json:"bic,omitempty"`
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) Reset() {
	*m = SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId{}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) String() string {
	return proto.CompactTextString(m)
}
func (*SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) ProtoMessage() {}
func (*SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{0, 4, 1, 0, 0}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId.Merge(m, src)
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) XXX_Size() int {
	return m.Size()
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId.DiscardUnknown(m)
}

var xxx_messageInfo_SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId proto.InternalMessageInfo

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) GetBic() string {
	if m != nil {
		return m.Bic
	}
	return ""
}

type Document struct {
	SecuritiesTradeConfirmation *SecuritiesTradeConfirmation `protobuf:"bytes,1,opt,name=securities_trade_confirmation,json=securitiesTradeConfirmation,proto3" json:"securities_trade_confirmation,omitempty"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f5a274f42dab5, []int{1}
}
func (m *Document) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Document.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return m.Size()
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetSecuritiesTradeConfirmation() *SecuritiesTradeConfirmation {
	if m != nil {
		return m.SecuritiesTradeConfirmation
	}
	return nil
}

func init() {
	proto.RegisterType((*SecuritiesTradeConfirmation)(nil), "xchange.isomessages.SecuritiesTradeConfirmation")
	proto.RegisterType((*SecuritiesTradeConfirmation_Qty)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.Qty")
	proto.RegisterType((*SecuritiesTradeConfirmation_FinInstrmId)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.FinInstrmId")
	proto.RegisterType((*SecuritiesTradeConfirmation_Pric)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.Pric")
	proto.RegisterType((*SecuritiesTradeConfirmation_Pric_Amt)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.Pric.Amt")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradVenue)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradVenue")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradgPty)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradgPty")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradgPty_PtyId)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradgPty.PtyId")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradgPty.PtyId.OrgId")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradgPty_RltdPty)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradgPty.RltdPty")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradgPty.RltdPty.PtyId")
	proto.RegisterType((*SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId)(nil), "xchange.isomessages.SecuritiesTradeConfirmation.TradgPty.RltdPty.PtyId.OrgId")
	proto.RegisterType((*Document)(nil), "xchange.isomessages.Document")
}

func init() {
	proto.RegisterFile("xchange/isomessages/securities_trade_confirmation.proto", fileDescriptor_e75f5a274f42dab5)
}

var fileDescriptor_e75f5a274f42dab5 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0x66, 0xfb, 0x77, 0x7b, 0xca, 0x8f, 0x9f, 0x8e, 0x26, 0x2e, 0xdb, 0xd8, 0x54, 0x12, 0x13,
	0xbc, 0x59, 0x0c, 0x42, 0x8c, 0xc6, 0xc4, 0x54, 0x2a, 0x66, 0x63, 0x08, 0x65, 0x25, 0x24, 0x1a,
	0xe3, 0x5a, 0x76, 0x96, 0x32, 0x09, 0xbb, 0x5b, 0x67, 0x4e, 0x09, 0x7b, 0xc7, 0xa5, 0xde, 0xf9,
	0x3c, 0x3e, 0x81, 0x97, 0x5c, 0xea, 0x9d, 0x81, 0x57, 0xf0, 0x01, 0xcc, 0x99, 0x6e, 0xa1, 0x10,
	0x25, 0xb6, 0x78, 0xb5, 0xe7, 0xef, 0x77, 0xbe, 0xf3, 0xed, 0x4c, 0x06, 0x1e, 0x1e, 0x04, 0xbb,
	0x9d, 0xb8, 0x1b, 0x2e, 0x08, 0x95, 0x44, 0xa1, 0x52, 0x9d, 0x6e, 0xa8, 0x16, 0x54, 0x18, 0xf4,
	0xa5, 0x40, 0x11, 0x2a, 0x1f, 0x65, 0x87, 0x87, 0x7e, 0x90, 0xc4, 0x3b, 0x42, 0x46, 0x1d, 0x14,
	0x49, 0xec, 0xf4, 0x64, 0x82, 0x09, 0xbb, 0x91, 0x35, 0x3a, 0x23, 0x8d, 0x73, 0xdf, 0xab, 0x50,
	0x7b, 0x75, 0xda, 0xbc, 0x49, 0xbd, 0x2b, 0x23, 0xad, 0x6c, 0x06, 0x72, 0x82, 0x5b, 0x33, 0x0d,
	0x63, 0xbe, 0xe0, 0xe5, 0x04, 0x67, 0x0d, 0x98, 0xa6, 0x01, 0x1a, 0xdf, 0x17, 0xdc, 0x32, 0x1a,
	0xc6, 0x7c, 0xc5, 0x03, 0x8a, 0x51, 0x9f, 0xcb, 0xd9, 0x5d, 0xf8, 0xff, 0xac, 0x82, 0xa3, 0x8f,
	0x91, 0x95, 0xd3, 0x45, 0xd3, 0xc3, 0xa2, 0x16, 0x6e, 0x46, 0x04, 0x24, 0xf7, 0x90, 0xfb, 0x89,
	0xe4, 0x92, 0x80, 0xf2, 0x03, 0x20, 0x8a, 0xad, 0x4b, 0x2e, 0x5d, 0xce, 0xee, 0xc1, 0x75, 0x5d,
	0x11, 0xa8, 0x5d, 0x3f, 0xda, 0x8f, 0x62, 0xa4, 0xb2, 0x82, 0x2e, 0x9b, 0xa1, 0xc4, 0x8a, 0xda,
	0x5d, 0xa3, 0xb0, 0xcb, 0x19, 0x83, 0x82, 0x12, 0x3c, 0xb4, 0x8a, 0x3a, 0xab, 0x6d, 0xb6, 0x0a,
	0xf9, 0x0f, 0x98, 0x5a, 0xa5, 0x86, 0x31, 0x5f, 0x5d, 0x5c, 0x72, 0x7e, 0xb3, 0xbc, 0x73, 0xc9,
	0xe2, 0xce, 0x06, 0xa6, 0x1e, 0x01, 0xb0, 0xf7, 0xf0, 0xdf, 0x8e, 0x88, 0x7d, 0x11, 0x2b, 0x94,
	0x11, 0x51, 0x28, 0x6b, 0xc4, 0x27, 0x63, 0x23, 0xae, 0x8a, 0xd8, 0xd5, 0x20, 0x2e, 0xf7, 0xaa,
	0x3b, 0x67, 0x0e, 0x73, 0xa1, 0xd0, 0x93, 0x22, 0xb0, 0x4c, 0x0d, 0xbc, 0x3c, 0x36, 0x70, 0x5b,
	0x8a, 0xc0, 0xd3, 0x10, 0xec, 0x16, 0x94, 0xb5, 0xf8, 0x1c, 0xad, 0x8a, 0xd6, 0xa2, 0x44, 0x6e,
	0x0b, 0xd9, 0x2c, 0x98, 0x0a, 0x71, 0x2f, 0xa2, 0x0c, 0xe8, 0x4c, 0x59, 0xfb, 0x2d, 0x64, 0xaf,
	0x41, 0xff, 0x3e, 0x7f, 0x3f, 0x8c, 0xfb, 0xa1, 0x55, 0xd5, 0x24, 0x1e, 0x8f, 0x4d, 0x82, 0x22,
	0x5b, 0x84, 0xe0, 0x55, 0x70, 0x68, 0xb2, 0x2d, 0xd0, 0x4e, 0xd7, 0xef, 0x61, 0x6a, 0x4d, 0x6b,
	0xe4, 0x47, 0x13, 0x21, 0x77, 0xdb, 0x98, 0x7a, 0x26, 0x66, 0x96, 0x5d, 0x83, 0xfc, 0x06, 0xa6,
	0xec, 0x26, 0x14, 0xfb, 0xb1, 0x40, 0xa5, 0x4f, 0x61, 0xd1, 0x1b, 0x38, 0xf6, 0x1d, 0xa8, 0x8e,
	0x48, 0x4d, 0x67, 0x43, 0x28, 0x11, 0x67, 0x27, 0x55, 0xdb, 0xf6, 0x27, 0x03, 0x0a, 0xa4, 0x1a,
	0x7b, 0x09, 0xf9, 0x4e, 0x84, 0x3a, 0x37, 0x09, 0x35, 0xc2, 0x70, 0x9a, 0x11, 0x7a, 0x84, 0x62,
	0x2f, 0x41, 0xbe, 0x19, 0x21, 0xbb, 0x06, 0xf9, 0x20, 0x48, 0xb3, 0x79, 0x64, 0xb2, 0x1a, 0x54,
	0xe8, 0xf8, 0x70, 0x9f, 0x66, 0x0d, 0x2e, 0x83, 0xa9, 0x03, 0xcd, 0x08, 0xed, 0x1a, 0x54, 0x4e,
	0xb5, 0xcb, 0xae, 0xdb, 0xa0, 0x35, 0x27, 0xb8, 0xfd, 0xa5, 0x00, 0xe6, 0x70, 0x7f, 0xb6, 0x05,
	0xa5, 0x1e, 0xa6, 0xc3, 0x5b, 0x57, 0x5d, 0x7c, 0x3a, 0xb1, 0x94, 0x4e, 0x1b, 0x53, 0x97, 0x7b,
	0xc5, 0x1e, 0x7d, 0xd8, 0x5b, 0x30, 0xf5, 0x45, 0xa3, 0x9f, 0x94, 0xd3, 0xc8, 0xcd, 0xc9, 0x91,
	0xbd, 0x3d, 0xe4, 0xf4, 0xb3, 0xca, 0x72, 0x60, 0xd8, 0x87, 0x06, 0x14, 0xdb, 0xd9, 0x9c, 0x52,
	0x22, 0xbb, 0x67, 0xfc, 0x9f, 0x5f, 0x91, 0xbf, 0xb3, 0x2e, 0xbb, 0xb4, 0x45, 0x42, 0x1f, 0x7b,
	0x16, 0x8a, 0xda, 0x27, 0xfd, 0xb7, 0x45, 0x30, 0xd4, 0x7f, 0x5b, 0x04, 0xf6, 0x4f, 0x03, 0xca,
	0x19, 0x2f, 0xf6, 0xee, 0x82, 0x88, 0x2f, 0xae, 0xbc, 0xea, 0x39, 0x31, 0xed, 0x8f, 0xa7, 0xeb,
	0xf2, 0x0b, 0xeb, 0xae, 0xfd, 0xa3, 0x49, 0x7f, 0xbb, 0xf6, 0xdc, 0xa1, 0x01, 0x66, 0x2b, 0x09,
	0xfa, 0x51, 0x18, 0x23, 0x43, 0xb8, 0x7d, 0xe9, 0x23, 0x91, 0x91, 0xbc, 0x3f, 0x2e, 0x49, 0xaf,
	0xa6, 0xfe, 0x9c, 0x7c, 0xb6, 0xfc, 0xf5, 0xb8, 0x6e, 0x1c, 0x1d, 0xd7, 0x8d, 0x1f, 0xc7, 0x75,
	0xe3, 0xf3, 0x49, 0x7d, 0xea, 0xe8, 0xa4, 0x3e, 0xf5, 0xed, 0xa4, 0x3e, 0xf5, 0xa6, 0x36, 0x7c,
	0xc6, 0x0e, 0xce, 0x3d, 0x64, 0x98, 0xf6, 0x42, 0xb5, 0x5d, 0xd2, 0x2f, 0xd6, 0x83, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd3, 0xad, 0x02, 0xcd, 0xec, 0x06, 0x00, 0x00,
}

func (m *SecuritiesTradeConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x70
	}
	if m.TradgPty != nil {
		{
			size, err := m.TradgPty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.TradVenue != nil {
		{
			size, err := m.TradVenue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SttlmDt) > 0 {
		i -= len(m.SttlmDt)
		copy(dAtA[i:], m.SttlmDt)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.SttlmDt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradDt) > 0 {
		i -= len(m.TradDt)
		copy(dAtA[i:], m.TradDt)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.TradDt)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Pric != nil {
		{
			size, err := m.Pric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FinInstrmId != nil {
		{
			size, err := m.FinInstrmId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Qty != nil {
		{
			size, err := m.Qty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Side) > 0 {
		i -= len(m.Side)
		copy(dAtA[i:], m.Side)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.Side)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RltdCshMvmntId) > 0 {
		i -= len(m.RltdCshMvmntId)
		copy(dAtA[i:], m.RltdCshMvmntId)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.RltdCshMvmntId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RltdOrdrId) > 0 {
		i -= len(m.RltdOrdrId)
		copy(dAtA[i:], m.RltdOrdrId)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.RltdOrdrId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradConfDtTm) > 0 {
		i -= len(m.TradConfDtTm)
		copy(dAtA[i:], m.TradConfDtTm)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.TradConfDtTm)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TradConfId) > 0 {
		i -= len(m.TradConfId)
		copy(dAtA[i:], m.TradConfId)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.TradConfId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_Qty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_Qty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_Qty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Units != 0 {
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(m.Units))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_FinInstrmId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_FinInstrmId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_FinInstrmId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Isin) > 0 {
		i -= len(m.Isin)
		copy(dAtA[i:], m.Isin)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.Isin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_Pric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_Pric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_Pric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amt != nil {
		{
			size, err := m.Amt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_Pric_Amt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_Pric_Amt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_Pric_Amt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InstdAmt) > 0 {
		i -= len(m.InstdAmt)
		copy(dAtA[i:], m.InstdAmt)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.InstdAmt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ccy) > 0 {
		i -= len(m.Ccy)
		copy(dAtA[i:], m.Ccy)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.Ccy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradVenue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradVenue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradVenue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradgPty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradgPty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradgPty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RltdPty != nil {
		{
			size, err := m.RltdPty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PtyId != nil {
		{
			size, err := m.PtyId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgId != nil {
		{
			size, err := m.OrgId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bic) > 0 {
		i -= len(m.Bic)
		copy(dAtA[i:], m.Bic)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.Bic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PtyId != nil {
		{
			size, err := m.PtyId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgId != nil {
		{
			size, err := m.OrgId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bic) > 0 {
		i -= len(m.Bic)
		copy(dAtA[i:], m.Bic)
		i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(len(m.Bic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Document) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecuritiesTradeConfirmation != nil {
		{
			size, err := m.SecuritiesTradeConfirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecuritiesTradeConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecuritiesTradeConfirmation(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecuritiesTradeConfirmation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecuritiesTradeConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TradConfId)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.TradConfDtTm)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.RltdOrdrId)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.RltdCshMvmntId)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.Side)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.Qty != nil {
		l = m.Qty.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.FinInstrmId != nil {
		l = m.FinInstrmId.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.Pric != nil {
		l = m.Pric.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.TradDt)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.SttlmDt)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.TradVenue != nil {
		l = m.TradVenue.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.TradgPty != nil {
		l = m.TradgPty.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSecuritiesTradeConfirmation(uint64(m.Id))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_Qty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Units != 0 {
		n += 1 + sovSecuritiesTradeConfirmation(uint64(m.Units))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_FinInstrmId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Isin)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_Pric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amt != nil {
		l = m.Amt.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_Pric_Amt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ccy)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	l = len(m.InstdAmt)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradVenue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradgPty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PtyId != nil {
		l = m.PtyId.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	if m.RltdPty != nil {
		l = m.RltdPty.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgId != nil {
		l = m.OrgId.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bic)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PtyId != nil {
		l = m.PtyId.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgId != nil {
		l = m.OrgId.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bic)
	if l > 0 {
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func (m *Document) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecuritiesTradeConfirmation != nil {
		l = m.SecuritiesTradeConfirmation.Size()
		n += 1 + l + sovSecuritiesTradeConfirmation(uint64(l))
	}
	return n
}

func sovSecuritiesTradeConfirmation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecuritiesTradeConfirmation(x uint64) (n int) {
	return sovSecuritiesTradeConfirmation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecuritiesTradeConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecuritiesTradeConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecuritiesTradeConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradConfDtTm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradConfDtTm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RltdOrdrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RltdOrdrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RltdCshMvmntId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RltdCshMvmntId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Side = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Qty == nil {
				m.Qty = &SecuritiesTradeConfirmation_Qty{}
			}
			if err := m.Qty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinInstrmId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinInstrmId == nil {
				m.FinInstrmId = &SecuritiesTradeConfirmation_FinInstrmId{}
			}
			if err := m.FinInstrmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pric == nil {
				m.Pric = &SecuritiesTradeConfirmation_Pric{}
			}
			if err := m.Pric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradDt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradDt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SttlmDt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SttlmDt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradVenue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradVenue == nil {
				m.TradVenue = &SecuritiesTradeConfirmation_TradVenue{}
			}
			if err := m.TradVenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradgPty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradgPty == nil {
				m.TradgPty = &SecuritiesTradeConfirmation_TradgPty{}
			}
			if err := m.TradgPty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_Qty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Qty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Qty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			m.Units = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Units |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_FinInstrmId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinInstrmId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinInstrmId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Isin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_Pric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amt == nil {
				m.Amt = &SecuritiesTradeConfirmation_Pric_Amt{}
			}
			if err := m.Amt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_Pric_Amt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ccy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ccy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstdAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstdAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradVenue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradVenue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradVenue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradgPty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradgPty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradgPty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PtyId == nil {
				m.PtyId = &SecuritiesTradeConfirmation_TradgPty_PtyId{}
			}
			if err := m.PtyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RltdPty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RltdPty == nil {
				m.RltdPty = &SecuritiesTradeConfirmation_TradgPty_RltdPty{}
			}
			if err := m.RltdPty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PtyId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PtyId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgId == nil {
				m.OrgId = &SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId{}
			}
			if err := m.OrgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradgPty_PtyId_OrgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RltdPty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RltdPty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PtyId == nil {
				m.PtyId = &SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId{}
			}
			if err := m.PtyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PtyId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PtyId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgId == nil {
				m.OrgId = &SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId{}
			}
			if err := m.OrgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuritiesTradeConfirmation_TradgPty_RltdPty_PtyId_OrgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuritiesTradeConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecuritiesTradeConfirmation == nil {
				m.SecuritiesTradeConfirmation = &SecuritiesTradeConfirmation{}
			}
			if err := m.SecuritiesTradeConfirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecuritiesTradeConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecuritiesTradeConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecuritiesTradeConfirmation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecuritiesTradeConfirmation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecuritiesTradeConfirmation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecuritiesTradeConfirmation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecuritiesTradeConfirmation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecuritiesTradeConfirmation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecuritiesTradeConfirmation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecuritiesTradeConfirmation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecuritiesTradeConfirmation = fmt.Errorf("proto: unexpected end of group")
)
